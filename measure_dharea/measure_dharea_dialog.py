# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AreaHeightDialog
                                 A QGIS plugin
 measure area and delta H
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Adam Lostowski
        email                : 01179174@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsPointXY, QgsGeometry
from qgis.utils import iface
from qgis.core import QgsMessageLog, Qgis

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'measure_dharea_dialog_base.ui'))


class AreaHeightDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AreaHeightDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_dh.clicked.connect(self.calculate_dh)
        self.pushButton_area.clicked.connect(self.area_gauss)
        
        
    def calculate_dh(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        if selected_features is None:
           iface.messageBar().pushMessage("Różnica wysokosci", 'Nie wybrano aktywnej warstwy', level = Qgis.Warning)
           return
        if len(selected_features) != 2:
           iface.messageBar().pushMessage("Różnica wysokosci", 'Aby policzyć wysokosc wybierz DWA PUNKTY', level = Qgis.Warning)
           return
        if len(selected_features) == 2:
            selected_features = current_layer.selectedFeatures()
            h_1 = float(selected_features[0]['wysokosc'])
            h_2 = float(selected_features[1]['wysokosc'])
            nr_punktu_1 = int(selected_features[0]['nr_punktu'])
            nr_punktu_2 = int(selected_features[1]['nr_punktu'])
            d_h = h_2 - h_1
            d_h = round(d_h, 1)
        self.label_dh_result.setText (f'{d_h} m')
        QgsMessageLog.logMessage(f'Przewyższenie między punktami nr {nr_punktu_1} a nr {nr_punktu_2} wynosi {d_h} metrów.', level = Qgis.Success)
        iface.messageBar().pushMessage("Przewyższenie", 'Przewyższenie zostało policzone', level = Qgis.Success)
        
        
    def area_gauss(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        
        selected_points = [int(feature.attribute('nr_punktu')) for feature in selected_features]
        punkty_string = ", ".join(map(str, selected_points))

        for i, feature in enumerate(selected_features):
            nr_punktu_x = int(feature.attribute('nr_punktu'))
            globals()[f"nr_punktu_{nr_punktu_x}"] = nr_punktu_x
        
        punkty = []
        for feat in selected_features:
            geom = feat.geometry()
            if geom.isMultipart():
                punkty.extend(geom.asMultiPoint())
            else:
                punkty.append(geom.asPoint())
        if len(selected_features)<3:
            iface.messageBar().pushMessage("Pole powierzchni", 'Aby policzyć pole powierzchni wybierz co najmniej TRZY PUNKTY', level = Qgis.Warning)
            return
        if len(selected_features)>=3:
            pole = 0
            dl = len(punkty)
            for e in range(dl):
                a = (e + 1) % dl
                pole += (punkty[a].x() + punkty[e].x()) * (punkty[a].y() - punkty[e].y())
            pole /= 2
            pole = round(abs(pole), 1)
            self.label_area_result.setText (f'{pole} m^2')
            QgsMessageLog.logMessage(f'Pole powierzchni między punktami {punkty_string} wynosi {pole} metrów kwadratowych.', level=Qgis.Success)
            iface.messageBar().pushMessage('Pole powierzchni', 'Pole powierzchni zostało policzone', level = Qgis.Success)